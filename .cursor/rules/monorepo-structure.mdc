---
description: 
globs: 
alwaysApply: true
---
# VRLY Monorepo Architecture

This is a TypeScript monorepo for VRLY - AI-powered workflow automation for psychotherapists. The codebase is optimized for a single AI-assisted developer using Bun workspaces.

## Technical Stack

- **Runtime & Package Manager**: Bun (v1.0+)
- **Language**: TypeScript (v5.3+)
- **Backend**: Cloudflare Workers, Workers for Platforms
- **Frontend**: Astro (SSR/SSG)
- **Database**: Cloudflare D1 (SQL), R2 (Object Storage), KV (Key-Value)
- **AI**: Cloudflare Workers AI, Vectorize
- **Configuration**: wrangler.jsonc
- **Testing**: Bun test runner
- **Deployment**: Wrangler, GitHub Actions

## Package Structure

```
packages/
├── platform/         # Core VRLY platform (Cloudflare Workers)
├── website/          # Marketing website (Astro + Cloudflare Workers)
├── clients/          # Client-specific implementations
├── integrations/     # Third-party service integrations
├── shared/           # Shared libraries and design system
└── internal/         # Internal tools and admin dashboard
```

## Development Workflow

1. Use `bun dev` to start all development servers in parallel
2. Use `bun run client:new <name>` to scaffold new client workspaces
3. Use `bun run deploy` for intelligent deployment based on git changes
4. Always use workspace protocol (`workspace:*`) for internal dependencies

## Key Patterns

- **Monorepo First**: All code in one repository for maximum AI context
- **Automation Over Documentation**: Scripts handle repetitive tasks
- **Healthcare Compliance**: DSGVO/GDPR compliance is mandatory
- **Single Developer Optimization**: Commands and workflows optimized for solo development
- **Bootstrap to Scale**: Start simple, add complexity incrementally

## Import Conventions

- Use `@vrly/package-name` for internal packages
- Prefer named exports over default exports
- Use absolute imports with TypeScript path aliases
- Always import types separately: `import type { ... }`

[package.json](mdc:package.json)
[tsconfig.json](mdc:tsconfig.json)
[wrangler.jsonc](mdc:wrangler.jsonc)
