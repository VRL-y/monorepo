---
description: VRLY Quick Reference
globs: 
alwaysApply: false
---
# VRLY Quick Reference

## üöÄ Essential Commands

```bash
# Development
bun dev                    # Start all dev servers
bun dev:platform          # Start platform only
bun dev:website           # Start website only

# Testing
bun test                  # Run all tests
bun test:watch           # Watch mode
bun test packages/platform # Test specific package

# Building & Deployment
bun build                 # Build all packages
bun run deploy           # Smart deploy (detects changes)
bun run deploy:platform  # Deploy platform only

# Client Management
bun run client:new <name> # Create new client workspace

# Code Quality
bun run type-check       # TypeScript checking
bun run lint            # Run linting
bun run lint:fix        # Auto-fix linting issues

# Utilities
bun run codegen         # Generate types from schemas
bun run ai-context      # Generate context for AI
```

## üìÅ Key File Locations

```
.cursor/rules/           # Cursor AI rules
packages/platform/       # Core API (Cloudflare Workers)
packages/website/        # vrly.de frontend (Astro)
packages/shared/         # Shared components & utils
packages/clients/        # Client implementations
scripts/                 # Automation scripts
wrangler.jsonc          # Cloudflare config
```

## üîë Environment Variables

```bash
# .dev.vars (local development)
CLOUDFLARE_ACCOUNT_ID=your_id
CLOUDFLARE_API_TOKEN=your_token
ENVIRONMENT=development
```

## üí° Common Patterns

### Creating a New API Endpoint

```typescript
// packages/platform/src/api/new-endpoint.ts
export async function handleNewEndpoint(
  request: Request,
  env: Env,
  ctx: ExecutionContext
): Promise<Response> {
  // 1. Validate input
  const data = await request.json();
  const validated = NewEndpointSchema.parse(data);

  // 2. Check permissions
  const tenantId = extractTenant(request);
  if (!tenantId) return unauthorized();

  // 3. Process request
  const result = await processRequest(validated, env);

  // 4. Log access (if sensitive)
  await logDataAccess(
    {
      action: "CREATE",
      resourceType: "endpoint",
      resourceId: result.id,
      tenantId,
    },
    env
  );

  // 5. Return response
  return json(result, { status: 201 });
}
```

### Creating a New Astro Page

```astro
---
// packages/website/src/pages/new-page.astro
import BaseLayout from '../layouts/BaseLayout.astro';

// SSR data fetching
const data = await fetchData();
---

<BaseLayout title="New Page">
  <section class="container mx-auto py-12">
    <h1 class="text-4xl font-bold text-vrly-slate">Title</h1>
    <!-- Content -->
  </section>
</BaseLayout>
```

### Adding a New Script

```typescript
#!/usr/bin/env bun
// scripts/category/new-script.ts

import { $ } from "bun";

if (process.argv.includes("--help")) {
  console.log(`Usage: bun run scripts/new-script.ts [options]`);
  process.exit(0);
}

async function main() {
  console.log("üöÄ Starting script...");
  // Script logic
  console.log("‚úÖ Done!");
}

await main();
```

## üè• Healthcare Compliance Checklist

Before committing code that handles patient data:

- [ ] Data is encrypted at rest
- [ ] Consent is checked before processing
- [ ] Access is logged to audit table
- [ ] DSGVO rights are respected (access, deletion, portability)
- [ ] No patient data in logs or error messages
- [ ] Proper error handling without data leakage

## üéØ Quick Debugging

```typescript
// Debug Cloudflare Workers locally
wrangler dev packages/platform/src/index.ts

// Tail production logs
wrangler tail vrly-platform-prod

// Check D1 database
wrangler d1 execute vrly-platform --command "SELECT * FROM patients LIMIT 10"

// Inspect KV namespace
wrangler kv:key list --namespace-id=your-namespace-id
```

## flaDoco DypeScript Handbook

## üé® VRLY Brand Colors

```css
--vrly-blue: #1d76db; /* Primary brand color */
--vrly-slate: #333f52; /* Text color */
--vrly-green: #2ecc71; /* Success/Secondary */
--vrly-teal: #1abc9c; /* Accent */
--vrly-neutral-100: #f0f4f8; /* Light backgrounds */
```

## üö® Emergency Procedures

```bash
# Rollback deployment
bun run scripts/rollback.ts production

# Check service health
bun run scripts/health-check.ts

# View error logs
wrangler tail vrly-platform-prod --format pretty | grep ERROR

# Emergency database backup
wrangler d1 export vrly-platform --output backup.sql
```

Remember: **When in doubt, test locally first!**
