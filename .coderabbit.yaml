# yaml-language-server: $schema=https://coderabbit.ai/integrations/schema.v2.json
language: en-US
tone_instructions: |
  Be a friendly, mentoring senior dev. Help juniors/newcomers understand best practices.
  Explain the "why" & link docs. Give actionable advice/examples.
  Use clear language. Frame feedback as growth. Blend with path instructions.
early_access: true
enable_free_tier: true
reviews:
  profile: chill
  request_changes_workflow: true
  high_level_summary: true
  high_level_summary_placeholder: "@coderabbitai summary"
  high_level_summary_in_walkthrough: false
  auto_title_placeholder: "@coderabbitai"
  auto_title_instructions: ""
  review_status: true
  commit_status: true
  fail_commit_status: true
  collapse_walkthrough: false
  changed_files_summary: true
  sequence_diagrams: true
  assess_linked_issues: true
  related_issues: true
  related_prs: true
  suggested_labels: true
  auto_apply_labels: true
  suggested_reviewers: false
  auto_assign_reviewers: false
  poem: false
  labeling_instructions:
    - label: Feature
      instructions: Adds new user-facing functionality or capabilities.
    - label: Bug Fix
      instructions: Corrects an error, bug, or unintended behavior in existing code.
    - label: Improvement
      instructions: >-
        Enhances existing code, performance, reliability, or developer
        experience (non-functional). Includes refactoring.
    - label: Chore
      instructions: >-
        Maintenance tasks, build process updates, dependency bumps, config
        changes (no production code change).
    - label: Test
      instructions: Adds or significantly updates tests (unit, integration, e2e).
    - label: Docs
      instructions: >-
        Changes solely related to documentation (READMEs, guides, code
        comments).
    - label: Security
      instructions: Addresses a security vulnerability or improves security posture.
    - label: Hotfix
      instructions: Urgent fix for a critical production issue (often cherry-picked).
    - label: Dependencies
      instructions: >-
        Updates to project dependencies, libraries, frameworks, or runtime
        versions.
  path_filters: []
  path_instructions:
    - path: "*"
      instructions: |
        # General Coding Standards (Complements Linters/Formatters)
        - Ensure all files use UTF-8 character encoding.
        - Lines should end with LF (line feed).
        - A newline character must be present at the end of every file.
        - Trim all trailing whitespaces.
        - Adhere to a maximum line length of 120 characters.
        - TODO/FIXME comments: Address them or create corresponding issues before merging.
        - Debugging code: Remove `console.log`, `debugger` statements, and other debugging helpers from production-bound code.
        - Code Clarity: Strive for self-documenting code through clear naming (variables, functions, classes) and logical structure.
        - YAGNI: Apply the "You Aren't Gonna Need It" principle. Avoid adding functionality until it's truly necessary.
        - Internationalization (i18n):
          - Externalize all user-facing strings into resource files if internationalization is a goal.
          - Avoid string concatenation for translated segments; use template literals or parameterized strings that respect language structure.
        # Testing Best Practices
        - Test Naming: Use descriptive names for test files (e.g., `*.spec.ts`, `*.test.ts`) and keep them co-located with the source files.
        - Test Cases: Clearly describe what each test (`describe` block) and individual case (`it` block) covers.
        - Granularity: Each test case should ideally verify a single aspect or behavior. Multiple assertions are fine if they test the same logical unit.
        - Independence: Ensure tests are independent and can run in any order without side effects on other tests.
        - DRY Principle in Tests: Avoid duplicating logic in tests, but don't over-abstract to the point of obscurity.
        - Edge Cases: Explicitly test edge cases and boundary conditions.
        - Focus: Test the public API and observable behavior, not internal implementation details (avoid over-mocking).
        - Mocks: Mock external dependencies to isolate tests and ensure reliability.
        - Setup/Teardown: Use `beforeEach`/`afterEach` (or equivalent) for consistent test setup and cleanup.
    - path: "**/*.ts"
      instructions: |
        # TypeScript Best Practices (Complements Biome Formatter & ESLint)
        # Type System & Safety
        - Explicit Types: Prefer explicit type annotations for variables, function parameters, and return types over implicit `any`.
        - `any` vs `unknown`: Avoid `any` where possible. Use `unknown` for values with truly unknown types and perform type-checking before use.
        - `import type`: Use `import type` for importing types and interfaces to ensure they are erased at compile time.
        - Type Guards: Implement type guards for runtime type checking when dealing with unions or complex types.
        - Reusable Types: Define reusable types/interfaces for common data structures. Use `interface` for object shapes and `type` for aliases, unions, intersections.
        # Naming Conventions
        - PascalCase: For types, interfaces, enums, and class names.
        - camelCase: For variables, function names, and class properties/methods.
        # Functions & Class Design
        - Single Responsibility Principle (SRP): Functions and classes should have a single, well-defined responsibility.
        - Brevity: Keep functions and methods concise (aim for 10-20 lines as a guideline, decompose larger ones).
        - Parameters: Limit the number of function parameters (3-4 is a good guideline). Pass an object for more complex inputs.
        - Early Exits: Use guard clauses and return early to reduce nesting and improve readability.
        - Side Effects: Minimize side effects. Functions should ideally rely on inputs to produce outputs. Clearly document any necessary side effects.
        - Immutability: Prefer immutable data structures and patterns where practical.
        - Composition over Inheritance: Favor composition for code reuse and flexibility. Avoid deep inheritance hierarchies.
        - Error Handling: Implement robust error handling using try/catch blocks, error returns, or specific error types.
        - Readability: Use descriptive names. Add comments only for complex logic that isn't self-evident from the code.
        - `public` Modifier: While not strictly necessary for JavaScript output, explicitly using `public` (and `private`/`protected`) improves code clarity and intent in TypeScript classes.
  abort_on_close: true
  disable_cache: false
  auto_review:
    enabled: true
    auto_incremental_review: true
    ignore_title_keywords: []
    labels: []
    drafts: false
    base_branches:
      - "^release/.*"
      - "^dev/.*"
  finishing_touches:
    docstrings:
      enabled: true
  tools:
    ast-grep:
      rule_dirs: []
      util_dirs: []
      essential_rules: true
      packages: []
    shellcheck:
      enabled: true
    ruff:
      enabled: false
    markdownlint:
      enabled: true
    github-checks:
      enabled: true
      timeout_ms: 90000
    languagetool:
      enabled: true
      enabled_rules: []
      disabled_rules: []
      enabled_categories: []
      disabled_categories: []
      enabled_only: false
      level: default
    biome:
      enabled: true
    hadolint:
      enabled: false
    swiftlint:
      enabled: false
    phpstan:
      enabled: false
    golangci-lint:
      enabled: false
    yamllint:
      enabled: true
    gitleaks:
      enabled: true
    checkov:
      enabled: true
    detekt:
      enabled: false
    eslint:
      enabled: true
    rubocop:
      enabled: false
    buf:
      enabled: false
    regal:
      enabled: false
    actionlint:
      enabled: true
    pmd:
      enabled: false
    cppcheck:
      enabled: false
    semgrep:
      enabled: true
    circleci:
      enabled: false
    sqlfluff:
      enabled: true
    prismaLint:
      enabled: false
    oxc:
      enabled: false
    shopifyThemeCheck:
      enabled: false
chat:
  auto_reply: true
  integrations:
    jira:
      usage: disabled
    linear:
      usage: disabled
knowledge_base:
  opt_out: false
  web_search:
    enabled: true
  learnings:
    scope: auto
  issues:
    scope: auto
  jira:
    usage: disabled
    project_keys: []
  linear:
    usage: disabled
    team_keys: []
  pull_requests:
    scope: auto
code_generation:
  docstrings:
    language: en-US
    path_instructions: []
